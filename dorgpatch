#!/usr/bin/env drush
<?php
/**
 * @file
 * Drush shell script for creating a patch for your Drupal module.
 * Requires the following setup:
 *
 *  - You are on a git feature branch for your issue.
 *  - The branch name is of the format '1234-description-of-issue' where 1234
 *    is the drupal.org issue number.
 *  - The feature branch is rebased to the major development branch you want to
 *    diff against.
 *  - All your work is committed.
 *
 * Optional, to support a 'tests-only' patch:
 *  - Your changes to tests are all on a branch whose name is of the format
 *    '1234-tests'. This should be merged into your feature branch.
 *
 * Optional, to support also creating an interdiff file, one of:
 *  - The most recent patch corresponds to a commit on the feature branch whose
 *    subject is of the form 'patch COMMENT-NUMBER', the number of the comment
 *    the patch was posted on.
 *  - The most recent patch file is in the current folder, and the filename
 *    contains both the issue number and the number of the comment it was posted
 *    on.
 *
 * The following optional parameters may be passed. If omitted, they will be
 * prompted for.
 *  - comment_number: The index number for the comment the patch will be posted
 *    on. One of:
 *    - the comment number for the issue.
 *    - '?' to query drupal.org's API to get the number for the next comment
 *      on the issue.
 *    - 'x' to not add a comment number to the patch na,e
 *  - previous_comment_number: TODO
 *
 * The following options may be used:
 *  - --sequential: Write a sequential patch, that is, a patch file which lists
 *      each separate commit on the branch rather. This can make a patch more
 *      readable (provided the commits are clean) for large changes or multiple
 *      renames.
 *  - --dry-run, n: Don't write any files.
 */

// Get args.
$arg = drush_shift();
$comment_number = $arg;

$arg = drush_shift();
$previous_comment_number = $arg;

$sequential = drush_get_option(['sequential']);

$dry_run  = drush_get_option(['dry-run', 'n']);
$debug    = drush_get_option(['debug']);

// Change directory to the actual place this script was run from, as Drush puts
// us in the Drupal root.
chdir(drush_cwd());

// Get the module name.
$current_module = get_current_module();

// Get the branches that are reachable.
$branch_list = explode("\n", shell_exec("git branch --merged"));
// Sort it by version number with the highest first. This accounts for a
// situation where we're on a branch such as 7.x-3.x, and 7.x-2.x is a direct
// ancestor because it's had no further development since branching.
usort($branch_list, 'version_compare');
$branch_list = array_reverse($branch_list);

if ($debug) { drush_print_r($branch_list); }

$branches = array();

// Analyse the list of branches obtained from git.
foreach ($branch_list as $branch) {
  //print "$branch\n";

  // Extract the branch mark and the branch name from the line.
  $matches = array();
  preg_match("@^(?P<mark>.)\s+(?P<name>\S+)@", $branch, $matches);

  // There's a blank line in the output from git.
  if (empty($matches['name'])) {
    continue;
  }

  $branch_name = $matches['name'];

  //drush_print_r($matches);

  $branches[$matches['name']] = array();

  // Identify the current branch from the '*' in the branch mark.
  if ($matches['mark'] == '*') {
    $current_branch = $branch_name;

    // Unpick the name of the current branch: can an issue number be deduced?
    $matches_2 = array();
    preg_match("@(?P<issue>\d{5,})-?(?P<description>.+)@", $current_branch, $matches_2);
    //drush_print_r($matches);

    if (!empty($matches_2['issue'])) {
      $issue_number = $matches_2['issue'];
    }

    if (!empty($matches_2['issue'])) {
      $branch_description = $matches_2['description'];
    }
  }

  // Identify the main development branch, of one of the following forms:
  //  - '7.x-1.x'
  //  - '7.x'
  //  - '8.0.x'
  if (preg_match("@(\d.x-\d+-x|\d.x|\d.\d+.x)@", $branch_name)) {
    // Don't set the master branch if it's already been found; this avoids
    // problems with multiple potential candidates.
    if (isset($master_branch)) {
      continue;
    }

    $master_branch = $branch_name;
    //print "master branch: $master_branch\n";
  }

  // Identify a tests branch.
  // The current branch SHOULD be the first one in the list, so it's safe to
  // rely on it being known by now.
  if (preg_match("@$issue_number-tests@", $branch_name)) {
    $tests_branch = $branch_name;
  }
}

drush_print("Detected module $current_module, with master branch $master_branch.");
drush_print("Detected local branch is for issue $issue_number.");
if (isset($tests_branch)) {
  drush_print("Detected tests branch.");
}

//drush_print_r($branches);

if (!isset($comment_number)) {
  $comment_number = drush_prompt("Enter the comment number, or '?' to query drupal.org's API for it, or <enter> to skip", '', FALSE);
}

// Don't use a comment nmber.
if ($comment_number == 'x') {
  $comment_number = NULL;
}

// Get the comment number from drupal.org's API.
if ($comment_number == '?') {
  // Set the user-agent for the request to drupal.org's API, to be polite.
  // See https://www.drupal.org/api
  ini_set('user_agent', "dorgpatch - https://github.com/joachim-n/dorgpatch.");
  $response = file_get_contents("https://www.drupal.org/api-d7/node.json?nid=$issue_number");
  $response = json_decode($response);
  //drush_print_r($response);
  $issue_node = $response->list[0];
  $issue_node_comment_count = $issue_node->comment_count;

  $comment_number = $issue_node_comment_count + 1;
}

if (!empty($comment_number)) {
  $number = "$issue_number-$comment_number";
}
else {
  $number = $issue_number;
}

$patch_name = "$number.$current_module.$branch_description.patch";

// Select the diff command to use.
if ($sequential) {
  $command = 'format-patch --stdout';
}
else {
  $command = 'diff';
}

if (!$dry_run) {
  shell_exec("git $command $master_branch > $patch_name");
}

drush_print_r("Written patch $patch_name with diff from $master_branch to local branch.");

// Optionally do a tests-only patch.
if (isset($tests_branch)) {
  $tests_patch_name = $patch_name = "$number.$current_module.$branch_description-tests-only.patch";

  shell_exec("git checkout $tests_branch");

  if (!$dry_run) {
    shell_exec("git diff $master_branch > $tests_patch_name");
  }

  drush_print_r("Written tests-only patch $tests_patch_name with diff from $tests_branch to local branch.");

  // Switch back to the original branch.
  shell_exec("git checkout -");
}

// Try to do an interdiff, either from a previous patch or from an earlier
// commit.
$previous_patch_name = get_previous_patch_file($issue_number, $previous_comment_number, $comment_number);
//drush_print_r("previous_patch_name: $previous_patch_name, previous_comment_number $previous_comment_number");
$previous_patch_commit = get_previous_patch_commit($master_branch);

if (!empty($previous_patch_name)) {
  // TODO: handle if no $previous_comment_number.
  $interdiff_name = "$issue_number-$previous_comment_number-$comment_number.$current_module.$branch_description.interdiff.txt";

  shell_exec("diff -up $previous_patch_name $patch_name > $interdiff_name");

  drush_print_r("Written interdiff $interdiff_name with diff from patch $previous_patch_name to new patch.");
}

if (!empty($previous_patch_commit)) {
  if (empty($previous_comment_number)) {
    // Assume the previous commit has a message of the form 'Patch COMMENT-NUMBER'.
    $log_message = shell_exec('git show ' . $previous_patch_commit . ' -s --pretty=format:"%s"');
    $matches = array();
    preg_match('@patch\s(\d+)@i', $log_message, $matches);

    // TODO: handle not found.
    $previous_comment_number = $matches[1];
  }

  $interdiff_name = "$issue_number-$previous_comment_number-$comment_number.$current_module.$branch_description.interdiff.txt";

  if (!empty($previous_comment_number)) {
    shell_exec("git diff $previous_patch_commit > $interdiff_name");

    drush_print_r("Written interdiff $interdiff_name with diff from git commit $previous_patch_commit to new patch.");
  }
}

/**
 * Get the name of the current module, based on the working directory.
 */
function get_current_module() {
  $working_dir = drush_cwd();

  // Special case for core; I for one have Drupal installed in lots of funnily-
  // named folders.
  if (file_exists($working_dir . "/index.php")) {
    return 'drupal';
  }

  // Get the module name.
  $current_module = basename($working_dir);

  // Allow for module folders to have a suffix. (E.g., I might have views-6 and
  // views-7 in my sandbox folder.)
  $current_module = preg_replace("@-.*$@", '', $current_module);

  return $current_module;
}

/**
 * Find the previous patch to create an interdiff from.
 */
function get_previous_patch_file($issue_number, &$previous_comment_number = NULL, $comment_number = NULL) {
  if (!empty($previous_comment_number)) {
    // First try to spot a previous patch name writen by this script.
    $previous_patch_name = "$issue_number-$previous_comment_number.$current_module.$branch_description.patch";
    if (file_exists($previous_patch_name)) {
      return $previous_patch_name;
    }

    // Second, try to find any patchfile which contains both the issue number and
    // previous comment number.
    $directory_files = scandir(".");

    //drush_print_r($directory_files);

    foreach($directory_files as $file) {
      if (preg_match("@\b($previous_comment_number\W$issue_number|$issue_number\W$previous_comment_number)\b.*\.patch$@", $file)) {
        $previous_patch_name = $file;
        return $previous_patch_name;
      }
    }
  }
  else {
    // No comment number given for a previous patch.
    // Look at all patch files that contain the issue number.
    $iterator = new FilesystemIterator(".");
    $filter = new RegexIterator($iterator, "@.*{$issue_number}.*\.patch@");
    $filelist = array();
    foreach ($filter as $file) {
      $filename = $file->getFilename();

      // Skip the current comment number, in case the script has been run
      // several times and has already created a patch for this comment.
      // (E.g. the user has made a patch but spotted things to fix before
      // uploading it.)
      if (preg_match("@\b{$comment_number}\b@", $filename)) {
        continue;
      }

      $matches = array();
      preg_match("@{$issue_number}[-._](\d+)@", $filename, $matches);
      $comment_id = $matches[1];

      $filelist[$comment_id] = $filename;
    }

    // Sort the array by the comment ID.
    ksort($filelist);
    print_r($filelist);

    // Get the last filename and comment number.
    end($filelist);
    $previous_patch_name = current($filelist);

    // Set the previous comment number now that we know it. (Yes this is really
    // ugly!!!)
    $previous_comment_number = key($filelist);

    return $previous_patch_name;
  }
}

/**
 * Get the SHA of the previous patch commit.
 */
function get_previous_patch_commit($master_branch) {
  $previous_patch_commit = NULL;

  // Get the log of the current branch.
  $log = shell_exec('git log --pretty=format:"%h %s" ' . "$master_branch..");
  //drush_print_r($log);

  $log_rows = explode("\n", $log);
  // Skip the current HEAD commit, as it's what we're patching with now.
  array_shift($log_rows);

  foreach ($log_rows as $row) {
    list($sha, $message) = explode(' ', $row);

    if (preg_match('@patch@', $message)) {
      $previous_patch_commit = $sha;
      break;
    }
  }

  return $previous_patch_commit;
}
